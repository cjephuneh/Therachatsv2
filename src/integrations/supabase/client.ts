// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

// Use direct string values or import from import.meta.env depending on your bundler
const SUPABASE_URL = "https://kdzqjjpolugtrkmygctd.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImtkenFqanBvbHVndHJrbXlnY3RkIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ1NTg1MTAsImV4cCI6MjA2MDEzNDUxMH0.JqVpU-zV9YajynfxfPGfyD4p_qWIHB-otWlZ8-gSiBo";

export const supabase = createClient<Database>(
  SUPABASE_URL, 
  SUPABASE_PUBLISHABLE_KEY,
  {
    auth: {
      persistSession: true,
      autoRefreshToken: true,
      detectSessionInUrl: true,
      storageKey: 'supabase_auth_token'
    }
  }
);

/**
 * Checks if a user is currently authenticated with Supabase
 * @returns Boolean indicating if a session exists
 */
export const isAuthenticated = async (): Promise<boolean> => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    return !!session;
  } catch (error) {
    console.error('Error checking authentication status:', error);
    return false;
  }
};

/**
 * Get the current user ID from the session
 * @returns User ID string or undefined if not authenticated
 */
export const getCurrentUserId = async (): Promise<string | undefined> => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    return session?.user?.id;
  } catch (error) {
    console.error('Error getting user ID:', error);
    return undefined;
  }
};

/**
 * Gets the current session data, returning null if no session exists
 * @returns Session data or null
 */
export const getSessionData = async () => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    return session;
  } catch (error) {
    console.error('Error getting session data:', error);
    return null;
  }
};

/**
 * Log current session information to console for debugging
 * @returns Boolean indicating if an active session was found
 */
export const logSessionInfo = async (): Promise<boolean> => {
  try {
    const { data: { session } } = await supabase.auth.getSession();
    if (session) {
      console.log('Active session found:', {
        userId: session.user.id,
        email: session.user.email,
        expiresAt: new Date(session.expires_at * 1000).toLocaleString()
      });
      return true;
    } else {
      console.log('No active session found');
      return false;
    }
  } catch (error) {
    console.error('Error logging session:', error);
    return false;
  }
};

// Set up auth state change listener
export const setupAuthStateChangeListener = () => {
  const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
    console.log('Supabase Auth event:', event);
    
    if (event === 'SIGNED_IN') {
      console.log('User signed in:', session?.user?.id);
    } else if (event === 'SIGNED_OUT') {
      console.log('User signed out');
    } else if (event === 'TOKEN_REFRESHED') {
      console.log('Session token refreshed');
    } else if (event === 'USER_UPDATED') {
      console.log('User data updated');
    }
  });

  return subscription;
};

// Initialize auth monitoring
export const initializeAuth = async () => {
  try {
    // Log initial session state
    await logSessionInfo();
    
    // Set up auth state change listener
    setupAuthStateChangeListener();
    
    return true;
  } catch (error) {
    console.error('Error initializing auth monitoring:', error);
    return false;
  }
};
